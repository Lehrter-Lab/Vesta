import geopandas as gpd
import h5py
import os

# Input parameters
infile      = "hiResInjection.h5"
output_file = "particles_new.bp"
times       = [2592000, 2599200]
depths      = [round(-0.5 * i, 1) for i in range(16)]

# Read points from either shapefile or HDF5
def read_points(infile):
    ext = os.path.splitext(infile)[1].lower()

    if ext == ".shp":
        gdf = gpd.read_file(infile)
        if not all(gdf.geometry.geom_type == 'Point'):
            raise ValueError("Shapefile must contain only Point geometries.")
        xs = gdf.geometry.x.tolist()
        ys = gdf.geometry.y.tolist()
        return xs, ys
    # For .h5 file generated by SMS from scatter
    elif ext == ".h5":
        path = "2DScatterModule/hiResInjection/Nodes/NodeLocs"
        with h5py.File(infile, 'r') as f:
            if path not in f:
                raise KeyError(f"'{path}' not found in HDF5 file.")
            coords = f[path][:]
            if coords.shape[1] < 2:
                raise ValueError("NodeLocs must have at least two columns (x and y).")
            xs = coords[:, 0]
            ys = coords[:, 1]
            return xs.tolist(), ys.tolist()

    else:
        raise ValueError(f"Unsupported input file format: {ext}")

# Generate properly formatted particle.bp block
def generate_particle_file(xs, ys, times, depths, output_file,
                           nscreen=0,
                           mod_part=0,
                           ibiofoul=0,
                           ibf=1,
                           istiff=0,
                           ibnd_beh=0,
                           ics_block="2 -122.6 37.38 ics slam0 sfea0",
                           time_params="0.01 90. 50. 72 1728 40"):
    if len(xs) != len(ys):
        raise ValueError("Longitude and latitude lists must be of the same length.")
    
    particle_lines = []
    particle_id    = 1
    for lon, lat in zip(xs, ys):
        for time in times:
            for depth in depths:
                line = f"{particle_id}\t{time}\t{lon:.7f}\t{lat:.7f}\t{depth}"
                particle_lines.append(line)
                particle_id += 1

    nparticles = len(particle_lines)

    # Header
    header_lines = [
        "Input for ptrack*",
        f"{nscreen} nscreen",
        f"{mod_part} mod_part (0: passive; 1: oil spill)",
        f"{ibiofoul} ibiofoul (0: no biofouling; 1: with biofouling)",
        f"{ibf} ibf !(1: forward; -1: backward)",
        f"{istiff} istiff !1: fixed distance from surface",
        f"{ibnd_beh} ibnd_beh (behavior near bnd or wet/dry; 0: reflect off; 1: slide)",
        f"{ics_block} (from param.nml)",
        f"{time_params} !h0,rnday,dtm,nspool,ihfskip,ndeltp",
        f"{nparticles} !# of particles"
    ]

    # Footer
    footer_lines = [
        "!Oil spill parameters needed only if mod_part=1",
        "1  3.0  0.2           !ihdf(0: constant diffusivity as hdc; 1: Smagorinsky),hdc,horcon",
        "1  0                  !ibuoy (buoyancy off (0) or on (1)),iwind (wind effect off (0) or on (1))",
        "20.0                  !set minimum percentage of stranding on shore (particles may be stranded if the random # exceeds this threshold)",
        "!start of biofouling paramaters, needed only if ibiofoul=1",
        "2.5e-3 0. 6.e-6 0.83 1.38   !bio_R0,bio_BT0,bio_BR,bio_den0 (ρ₀),bio_den_biolayer (ρ_D)"
    ]

    # Write to file
    with open(output_file, 'w') as f:
        f.write("\n".join(header_lines) + "\n")
        f.write("\n".join(particle_lines) + "\n")
        f.write("\n".join(footer_lines) + "\n")

    print(f"Generated {nparticles} particles and wrote to {output_file}")

## Do the work
xs, ys = read_points(infile)
generate_particle_file(xs, ys, times, depths, output_file)
